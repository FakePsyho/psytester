[general]
# version, don't edit this unless you're trying to manually update the config file to a newer version of mmtester
version = 0.5.1

# description of the config
description = old (pre 2021) Topcoder Marathon problems; there's a small chance of producing zero score for valid submission due to stdout & stderr mangling

# dir where result files are saved
results_dir = .

# dir where outputs are saved
tests_dir = tests

# if set to False all outputs are saved to separate folders (tests_dir/run_name/), if set to True, they are saved to the same folder (tests_dir/)
merge_output_dirs = False

# extension for result files
results_ext = .res

# whether keep the outputs
keep_output_files = True

# number of precision digits used in scoring
precision = 4

# whether to use colors in the leaderboard
show_colors = True 
# allowed colors: BLACK, RED, GREEN, YELLOW, BLUE, MAGENTA, CYAN, WHITE, DEFAULT (DEFAULT means using default terminal color)
# you can also use BRIGHT_ and DIM_ prefixes (e.g. BRIGHT_RED) to make the color brighter/darker (note that DIM_ probably won't work in most terminals)
header_color = BRIGHT_DEFAULT
even_row_color = YELLOW
odd_row_color = DEFAULT
# for group_max_color, you can additionally use the following values: BRIGHT_*, DIM_*, *_COLOR (where COLOR is one of the colors above); those will only update specified style or color without affecting the other
group_max_color = GREEN

# show: defines the order of columns in the leaderboard
# leaderboard_score is the default one used for score
# leaderboard_custom is used when supplied with --var 
# OVERALL = overall score
# GROUPS = all columns related to --groups
# BESTS = number of times the result achieved the best result
# UNIQUES = number of unique (not achieved by any other result) bests
# GAIN = contribution towards the relative bests (sum for each unique best result - second best result)
# FAILS = number of fails 
# MISSING = number of missing values
# VAR:NAME = average value of NAME, where NAME is case-sensitive data contained in results (e.g. VAR:score)
# you can add ? after the name (for example FAILS?) so that column will be added only if it has any non-zero values 
leaderboard_score = OVERALL,GROUPS,BESTS,UNIQUES,GAIN,FAILS?,MISSING?
leaderboard_custom = OVERALL,GROUPS,FAILS?,MISSING?

# commands used to run / generate tests, check github project page for more information
cmd_tester = java -jar tester.jar -novis -exec a.exe -seed %SEED% %TESTER_ARGS% > %OUTPUT_DIR%/%SEED%.out
output_files = %OUTPUT_DIR%/%SEED%.out

# regex patterns used for extracting information (score, time & user-defined metadata) from output files
# when analyzing output, every line is matched vs every pattern (you can add new patterns by adding options that start with "extraction_regex_")
# in order to extract variables you need to define named catch group with the variable name
# alternatively there are two special names: VARIABLE and VALUE that you can use for extracting both name and the value, so that you don't have to create a separate pattern for each value you want to add
# the strings are imported as raw, so there's no need for double-escaped characters 
extraction_regex_0 = ^\s*\[DATA\]\s+(?P<VARIABLE>[a-zA-Z]\w*)\s*=\s*(?P<VALUE>\S+)\s*$
extraction_regex_1 = ^\s*Score\s*=\s*(?P<score>[-+]?\d*\.\d+|\d+)\s*$

[default]
# type of scoring: raw (sum of absolute scores), min (relative, lower = better), max (relative, higher = better)
scoring = max

# number of concurrent runs 
threads_no = 3

# whether to show current progress
progress = True

# either number of tests (seeds 1-N), range of seeds (A-B) or the name of the file that stores seeds in plain text (1 seed per line) or JSON format used in results files
tests = 

# not sure why it's useful, but it's here
tester_arguments = 

# path to file with metadata (including extension); set it to LATEST if you always want to use latest res file
data = LATEST

# scales scores so that max is equal to scale no matter the number of tests, leave it empty to just show the sum
scale = 100.0

# how to sort results files: name (alphabetically), date (oldest to newest)
sorting = name
